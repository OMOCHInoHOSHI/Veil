/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.ResponseAudioUploadResponse
import org.openapitools.client.models.ResponsePlaylistCreateResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class FileApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:8080/api")
        }
    }

    /**
     * UplopadAudio
     * ファイルをアップロードする
     * @param userId ユーザーID
     * @param audio 音声ファイル
     * @param color イメージカラー
     * @param tags タグ
     * @return ResponseAudioUploadResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersUserIdAudiosPost(userId: kotlin.String, audio: java.io.File, color: kotlin.String, tags: kotlin.String) : ResponseAudioUploadResponse {
        val localVarResponse = usersUserIdAudiosPostWithHttpInfo(userId = userId, audio = audio, color = color, tags = tags)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ResponseAudioUploadResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * UplopadAudio
     * ファイルをアップロードする
     * @param userId ユーザーID
     * @param audio 音声ファイル
     * @param color イメージカラー
     * @param tags タグ
     * @return ApiResponse<ResponseAudioUploadResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersUserIdAudiosPostWithHttpInfo(userId: kotlin.String, audio: java.io.File, color: kotlin.String, tags: kotlin.String) : ApiResponse<ResponseAudioUploadResponse?> {
        val localVariableConfig = usersUserIdAudiosPostRequestConfig(userId = userId, audio = audio, color = color, tags = tags)

        return request<Map<String, PartConfig<*>>, ResponseAudioUploadResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersUserIdAudiosPost
     *
     * @param userId ユーザーID
     * @param audio 音声ファイル
     * @param color イメージカラー
     * @param tags タグ
     * @return RequestConfig
     */
    fun usersUserIdAudiosPostRequestConfig(userId: kotlin.String, audio: java.io.File, color: kotlin.String, tags: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "audio" to PartConfig(body = audio, headers = mutableMapOf()),
            "color" to PartConfig(body = color, headers = mutableMapOf()),
            "tags" to PartConfig(body = tags, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users/{userId}/audios".replace("{"+"userId"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * CreatePlaylist
     * プレイリストを作成する
     * @param userId ユーザーID
     * @param image 画像ファイル
     * @param title プレイリストタイトル
     * @param `public` 公開設定(true,false)
     * @return ResponsePlaylistCreateResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun usersUserIdPlaylistsPost(userId: kotlin.String, image: java.io.File, title: kotlin.String, `public`: kotlin.String) : ResponsePlaylistCreateResponse {
        val localVarResponse = usersUserIdPlaylistsPostWithHttpInfo(userId = userId, image = image, title = title, `public` = `public`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ResponsePlaylistCreateResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * CreatePlaylist
     * プレイリストを作成する
     * @param userId ユーザーID
     * @param image 画像ファイル
     * @param title プレイリストタイトル
     * @param `public` 公開設定(true,false)
     * @return ApiResponse<ResponsePlaylistCreateResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun usersUserIdPlaylistsPostWithHttpInfo(userId: kotlin.String, image: java.io.File, title: kotlin.String, `public`: kotlin.String) : ApiResponse<ResponsePlaylistCreateResponse?> {
        val localVariableConfig = usersUserIdPlaylistsPostRequestConfig(userId = userId, image = image, title = title, `public` = `public`)

        return request<Map<String, PartConfig<*>>, ResponsePlaylistCreateResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersUserIdPlaylistsPost
     *
     * @param userId ユーザーID
     * @param image 画像ファイル
     * @param title プレイリストタイトル
     * @param `public` 公開設定(true,false)
     * @return RequestConfig
     */
    fun usersUserIdPlaylistsPostRequestConfig(userId: kotlin.String, image: java.io.File, title: kotlin.String, `public`: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "image" to PartConfig(body = image, headers = mutableMapOf()),
            "title" to PartConfig(body = title, headers = mutableMapOf()),
            "public" to PartConfig(body = `public`, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users/{userId}/playlists".replace("{"+"userId"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
